<?php
# Code generated by protoc-gen-volcengine-sdk
# source: VodPlayService
# DO NOT EDIT!

namespace Volc\Service\Vod;

use Exception;
use Throwable;
use Volc\Base\V4Curl;
use \GuzzleHttp\Client;
use Volc\Models\Vod\Request\VodGetPlayInfoRequest;
use Volc\Models\Vod\Response\VodGetPlayInfoResponse;
use Volc\Models\Vod\Request\VodGetOriginalPlayInfoRequest;
use Volc\Models\Vod\Response\VodGetOriginalPlayInfoResponse;

/**
 * Generated from protobuf service <code>Volcengine.Service.Vod.VodPlayService</code>
 */

const ResourceSpaceFormat = "trn:vod:%s:*:space/%s";
const ResourceVideoFormat = "trn:vod::*:video_id/%s";
const ResourceStreamTypeFormat = "trn:vod:::stream_type/%s";
const ResourceWatermarkFormat = "trn:vod::*:watermark/%s";
const ActionGetPlayInfo = "vod:GetPlayInfo";
const ActionApplyUpload = "vod:ApplyUpload";
const ActionCommitUpload = "vod:CommitUpload";
const Star = "*";
const Statement = "Statement";


class Vod extends V4Curl
{
    private static $UPDATE_INTERVAL = 10;
    private $lastDomainUpdateTime;
    private $domainCache = array();

    protected function getConfig(string $region)
    {
        switch ($region) {
            case 'cn-north-1':
                $config = [
                    'host' => 'http://volcengineapi-boe.byted.org',
//                    'host' => 'https://vod.volcengineapi.com',
                    'config' => [
                        'timeout' => 5.0,
                        'headers' => [
                            'Accept' => 'application/json'
                        ],
                        'v4_credentials' => [
                            'region' => 'cn-north-1',
                            'service' => 'vod',
                        ],
                    ],
                ];
                break;
            case 'ap-singapore-1':
                $config = [
                    'host' => 'https://vod.ap-singapore-1.volcengineapi.com',
                    'config' => [
                        'timeout' => 5.0,
                        'headers' => [
                            'Accept' => 'application/json'
                        ],
                        'v4_credentials' => [
                            'region' => 'ap-singapore-1',
                            'service' => 'vod',
                        ],
                    ],
                ];
                break;
            case 'us-east-1':
                $config = [
                    'host' => 'https://vod.us-east-1.volcengineapi.com',
                    'config' => [
                        'timeout' => 5.0,
                        'headers' => [
                            'Accept' => 'application/json'
                        ],
                        'v4_credentials' => [
                            'region' => 'us-east-1',
                            'service' => 'vod',
                        ],
                    ],
                ];
                break;
            default:
                throw new \Exception("Cant find the region, please check it carefully");
        }
        return $config;
    }

    protected $apiList = [
        'GetPlayInfo' => [
            'url' => '/',
            'method' => 'get',
            'config' => [
                'query' => [
                    'Action' => 'GetPlayInfo',
                    'Version' => '2020-08-01',
                ],
            ]
        ],
        'GetOriginalPlayInfo' => [
            'url' => '/',
            'method' => 'get',
            'config' => [
                'query' => [
                    'Action' => 'GetOriginalPlayInfo',
                    'Version' => '2020-08-01',
                ],
            ]
        ],
    ];

    public function getPlayAuthToken(array $config = [])
    {
        $token = ["Version" => "v1"];
        $token["GetPlayInfoToken"] = parse_url($this->getRequestUrl("GetPlayInfo", $config))["query"];
        return base64_encode(json_encode($token));
    }

    /**
     * GetPlayInfo.
     *
     * @param $req VodGetPlayInfoRequest
     * @return VodGetPlayInfoResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function getPlayInfo(VodGetPlayInfoRequest $req): VodGetPlayInfoResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('GetPlayInfo', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodGetPlayInfoResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * GetOriginalPlayInfo.
     *
     * @param $req VodGetOriginalPlayInfoRequest
     * @return VodGetOriginalPlayInfoResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function getOriginalPlayInfo(VodGetOriginalPlayInfoRequest $req): VodGetOriginalPlayInfoResponse
    {
        $query = VodUtils::formatRequestParam($req);
        try {
            $response = $this->request('GetOriginalPlayInfo', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodGetOriginalPlayInfoResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

}  // end of service interface

