<?php
# Code generated by protoc-gen-volcengine-sdk
# source: Vod
# DO NOT EDIT!

namespace Volc\Service\Vod;

use Exception;
use Throwable;
use Volc\Base\V4Curl;
use Volc\Models\Vod\Request\VodGetPlayInfoRequest;
use Volc\Models\Vod\Response\VodGetPlayInfoResponse;
use Volc\Models\Vod\Request\VodGetOriginalPlayInfoRequest;
use Volc\Models\Vod\Response\VodGetOriginalPlayInfoResponse;
use Volc\Models\Vod\Request\VodUrlUploadRequest;
use Volc\Models\Vod\Response\VodUrlUploadResponse;
use Volc\Models\Vod\Request\VodQueryUploadTaskInfoRequest;
use Volc\Models\Vod\Response\VodQueryUploadTaskInfoResponse;
use Volc\Models\Vod\Request\VodApplyUploadInfoRequest;
use Volc\Models\Vod\Response\VodApplyUploadInfoResponse;
use Volc\Models\Vod\Request\VodCommitUploadInfoRequest;
use Volc\Models\Vod\Response\VodCommitUploadInfoResponse;
use Volc\Models\Vod\Request\VodUpdateVideoInfoRequest;
use Volc\Models\Vod\Response\VodUpdateVideoInfoResponse;
use Volc\Models\Vod\Request\VodUpdateVideoPublishStatusRequest;
use Volc\Models\Vod\Response\VodUpdateVideoPublishStatusResponse;
use Volc\Models\Vod\Request\VodGetVideoInfosRequest;
use Volc\Models\Vod\Response\VodGetVideoInfosResponse;
use Volc\Models\Vod\Request\VodGetRecommendedPosterRequest;
use Volc\Models\Vod\Response\VodGetRecommendedPosterResponse;
use Volc\Models\Vod\Request\VodStartWorkflowRequest;
use Volc\Models\Vod\Response\VodStartWorkflowResponse;

/**
 * Generated from protobuf service <code>vod/service/service_vod.proto</code>
 */
class Vod extends V4Curl
{

    protected $apiList;

    public function __construct()
    {
        $this->region = func_get_arg(0);
        $this->apiList = VodOption::$apiList;
        parent::__construct($this->region);
    }

    protected function getConfig(string $region){
        try {
            return VodOption::getConfig($region);
        } catch (Exception $e) {
            print_r($e->getMessage());
            print_r($e->getTraceAsString());
            throw $e;
        }
    }

    public function getPlayAuthToken(array $config = [])
    {
        $token = ["Version" => "v1"];
        $token["GetPlayInfoToken"] = parse_url($this->getRequestUrl("GetPlayInfo", $config))["query"];
        return base64_encode(json_encode($token));
    }

	/**
     * GetPlayInfo.
     *
     * @param $req VodGetPlayInfoRequest
     * @return VodGetPlayInfoResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getPlayInfo (VodGetPlayInfoRequest $req): VodGetPlayInfoResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetPlayInfo', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetPlayInfoResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetOriginalPlayInfo.
     *
     * @param $req VodGetOriginalPlayInfoRequest
     * @return VodGetOriginalPlayInfoResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getOriginalPlayInfo (VodGetOriginalPlayInfoRequest $req): VodGetOriginalPlayInfoResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetOriginalPlayInfo', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetOriginalPlayInfoResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * UploadMediaByUrl.
     *
     * @param $req VodUrlUploadRequest
     * @return VodUrlUploadResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function uploadMediaByUrl (VodUrlUploadRequest $req): VodUrlUploadResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('UploadMediaByUrl', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodUrlUploadResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * QueryUploadTaskInfo.
     *
     * @param $req VodQueryUploadTaskInfoRequest
     * @return VodQueryUploadTaskInfoResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function queryUploadTaskInfo (VodQueryUploadTaskInfoRequest $req): VodQueryUploadTaskInfoResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('QueryUploadTaskInfo', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodQueryUploadTaskInfoResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * ApplyUploadInfo.
     *
     * @param $req VodApplyUploadInfoRequest
     * @return VodApplyUploadInfoResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function applyUploadInfo (VodApplyUploadInfoRequest $req): VodApplyUploadInfoResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('ApplyUploadInfo', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodApplyUploadInfoResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * CommitUploadInfo.
     *
     * @param $req VodCommitUploadInfoRequest
     * @return VodCommitUploadInfoResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function commitUploadInfo (VodCommitUploadInfoRequest $req): VodCommitUploadInfoResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('CommitUploadInfo', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodCommitUploadInfoResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * UpdateVideoInfo.
     *
     * @param $req VodUpdateVideoInfoRequest
     * @return VodUpdateVideoInfoResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function updateVideoInfo (VodUpdateVideoInfoRequest $req): VodUpdateVideoInfoResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('UpdateVideoInfo', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodUpdateVideoInfoResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * UpdateVideoPublishStatus.
     *
     * @param $req VodUpdateVideoPublishStatusRequest
     * @return VodUpdateVideoPublishStatusResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function updateVideoPublishStatus (VodUpdateVideoPublishStatusRequest $req): VodUpdateVideoPublishStatusResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('UpdateVideoPublishStatus', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodUpdateVideoPublishStatusResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetVideoInfos.
     *
     * @param $req VodGetVideoInfosRequest
     * @return VodGetVideoInfosResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getVideoInfos (VodGetVideoInfosRequest $req): VodGetVideoInfosResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetVideoInfos', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetVideoInfosResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetRecommendedPoster.
     *
     * @param $req VodGetRecommendedPosterRequest
     * @return VodGetRecommendedPosterResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getRecommendedPoster (VodGetRecommendedPosterRequest $req): VodGetRecommendedPosterResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetRecommendedPoster', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetRecommendedPosterResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * StartWorkflow.
     *
     * @param $req VodStartWorkflowRequest
     * @return VodStartWorkflowResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function StartWorkflow (VodStartWorkflowRequest $req): VodStartWorkflowResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('StartWorkflow', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodStartWorkflowResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
}  // end of service
